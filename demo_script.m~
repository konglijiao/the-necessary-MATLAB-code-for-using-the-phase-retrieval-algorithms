%% Script for using phase-retrieval algorithms.
clear; clc; close all;
addpath(genpath('Algorithms/'));

%% Problem parameters
n = 16^2;
p = 12 * n;
sigma_w = 1e-8;                       % noise standard-deviation
meas_type = 3;                        % 1: 0, 1 measurements
                                      % 2: -1, 1 measurements
                                      % 3: Gaussian measurements
                                      
%% Algorithm parameters
alg_type = 8;                         % 1: Gerchberg-Saxton algorithm
                                      % 2: WF
                                      % 3: PhaseLift
                                      % 4: PhaseCut
                                      % 5: PhaseMax
                                      % 6: prGAMP
                                      % 7: prVBEM
                                      % 8: prVAMP

%% Make measurements
x_o = randn(n, 1) + 1j * randn(n, 1);
xvar = var(x_o);
switch meas_type
    case 1
        A = round(rand(p, n));
    case 2
        A = 2 * round(rand(p, n)) - 1;
    case 3
        A = randn(p, n) + 1j * randn(p, n);
end
noise_vec = sigma_w * (1/sqrt(2) * randn(p, 1) + 1j * 1/sqrt(2) * randn(p, 1));
y = abs(A * x_o + noise_vec);

%% Retrive phase from magnitude measurements
switch alg_type
    case 1
        n_iters = 250;
        A_dag = pinv(A);
        x_recovered = GS(y, A, A_dag, n_iters);
    case 2
        n_iters = 2500;
        tau0 = 330;      % Schedule for step size
        x_recovered = WF(y, A, n_iters, tau0);
    case 3
        n_iters = 200;
        x_recovered = PhaseLift(y, A, n_iters);
    case 4
        n_iters = 200;
        x_recovered = PhaseCut(y, A, n_iters);
    case 5
        n_iters = 100;
        x_recovered = PhaseMax(y, A, n_iters);
    case 6
        n_iters = 50;
        x_init = sqrt(xvar) * (1 / sqrt(2) * randn(n, 1) + 1j * 1 / sqrt(2) * randn(n, 1));
        opts = {};
        opts.priorPrmts = [1, 0, var(x_init)];
        Beta = .1;
        x_recovered = myprGAMP(Beta, sigma_w^2, x_init, [], y, n_iters, n, 1, 'gb', 1, 'phaseless', opts.priorPrmts, A);
    case 7
        n_iters = 50;
        x_recovered = prVBEM_withnoise(y, A, sigma_w, n_iters);
    case 8
        n_iters = 50;
        spars = 1;
        xvar_hat = 4 * xvar;
        x_init = sqrt(xvar) * (1 / sqrt(2)) * randn(n, 1) + 1j * ()randn(n, 1);
        [U,S,V] = svd(A, 'econ');
        d = diag(S).^2;
        EstimIn = SparseScaEstim(CAwgnEstimIn(0,xvar_hat),spars);
        wvar_hat = sigma_w^2;
        EstimOut=ncCAwgnEstimOut(y,wvar_hat*ones(p,1),0,0);
        vampOpt = VampGlmOpt;
        vampOpt.nitMax = n_iters;
        vampOpt.tol = 0;%Always run to nitMax
        vampOpt.damp = .8;
        vampOpt.learnGam1 = false;
        vampOpt.verbose = false;
        vampOpt.U = U;
        vampOpt.V = V;
        vampOpt.d = d;
        vampOpt.p1init = wvar_hat*(1/sqrt(2)*randn(p,1)+1i*1/sqrt(2)*randn(p,1));
        [x_recovered,~] = myVampGlmEst(EstimIn,EstimOut,A,vampOpt,x_init);        
end

%% Unwrap phase of the solution
x_unwrapped = x_recovered * exp(-1j * angle(trace(x_o' * x_recovered)));
x_nrmse = norm(x_o - x_unwrapped, 'fro') / norm(x_o, 'fro');
fprintf('NRMSE: %f', x_nrmse)

%%
